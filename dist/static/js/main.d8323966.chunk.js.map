{"version":3,"sources":["logo.svg","components/mrt/node.js","components/mrt/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","state","displayInteractionTool","id","randomstring","generate","focusIndex","action","source","this","onEdit","textColor","chroma","color","darken","baseY","textXOffset","radius","textLines","iconSize","lineHeight","texts","pins","map","pin","_idx","key","transform","onMouseOver","e","isRoot","setState","onMouseLeave","className","fontSize","fill","opacity","textPieces","_text","idx","x","y","visibility","width","height","edits","rate","onClick","bottomY","collapsed_path","expanded_path","stroke","strokeWidth","React","Component","MRT","hideSubBranch","EraMinRatio","lastEraRatio","labelTextFontSize","nodeRadius","nodeTextLeadingMargin","nodeTextWidth","nodeTextFontSize","nodeTextLineHeight","averageFontWidthRatio","nodePaddingLeft","nodePaddingRight","nodePaddingTop","nodePaddingBottom","nodeOffsetX","nodeOffsetY","nodeWidth","nodeTextLines","node","reduce","prev","length","nodeHeight","lines","Math","max","nodeTextFold","text","span","textLength","floor","match","RegExp","_data","data","extract","paper","year","venue","trim","title","citations","prefix","venue_year","exec","replace","root","branches","forEach","branch","push","sort","a","b","clusterNames","userEdits","cluster","toExchange","views","colorDefs","nodes","edges","dataView","_","cloneDeep","_node","numBranches","numClusters","rootColor","scale","colors","cubehelix","start","rotations","gamma","lightness","correctLightness","eras","years","flat","_to","_cnt","eraMinSize","lastEraMinSize","i","from","to","cnt","generateGradientColor","x1","y1","x2","y2","colorID","gradientUnits","offset","stopColor","clusterIndex","branchID","era","eraID","brighten","filter","horizon","_height","maxLines","nodeLeft","nodeRight","_branch","startEra","endEra","_nextBranch","sib","yStart","yEnd","param","_state","_width","viewBox","luminance","edge","Infinity","isCurrent","App","sample_data","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8323966.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport { ReactComponent as IconThumbsUpSolid } from '@fortawesome/fontawesome-free/svgs/solid/thumbs-up.svg'\nimport { ReactComponent as IconThumbsDownSolid } from '@fortawesome/fontawesome-free/svgs/solid/thumbs-down.svg'\nimport { ReactComponent as IconThumbsUp } from '@fortawesome/fontawesome-free/svgs/regular/thumbs-up.svg'\nimport { ReactComponent as IconThumbsDown } from '@fortawesome/fontawesome-free/svgs/regular/thumbs-down.svg'\nimport { ReactComponent as IconExchange } from '@fortawesome/fontawesome-free/svgs/solid/exchange-alt.svg'\nimport chroma from 'chroma-js'\nimport randomstring from 'randomstring'\nimport './node.css'\n\nexport default class Node extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {displayInteractionTool: false}\n        this.id = randomstring.generate(8)\n        this.state = { focusIndex: -1 }\n    }\n\n    onEdit(action, source) {\n        if (this.props.onEdit) this.props.onEdit(action, source)\n    }\n\n    render() {\n        let textColor = chroma(this.props.color).darken()\n        let baseY = 0\n        let textXOffset = this.props.radius * 1.5\n        let textLines = 0\n        const iconSize = this.props.lineHeight * 2\n        const texts = this.props.pins.map((pin, _idx) => {\n            baseY = textLines * this.props.lineHeight\n            return (\n                <g key={_idx} transform={`translate(${textXOffset}, ${baseY})`}\n                    onMouseOver={(e) => { if (!this.props.isRoot) this.setState({...this.state, focusIndex: _idx})}}\n                    onMouseLeave={(e) => { if (!this.props.isRoot) this.setState({...this.state, focusIndex: -1})}}>\n                    <text className=\"paper-text\" id={`text-${this.id}-${_idx}`} fontSize={this.props.fontSize} fill={textColor}\n                          opacity={(this.state.focusIndex === _idx ? 0.3 : (this.state.focusIndex === _idx + 1 ? 0.1 : 1))}>\n                        {pin.textPieces.map((_text, idx) => {\n                            textLines++\n                            return <tspan key={idx} x=\"0\" y={idx * this.props.lineHeight}>{_text}</tspan>\n                        })}\n                    </text>\n                    <g className=\"paper-edit-icon-group\" visibility={this.state.focusIndex === _idx ? \"none\" : \"hidden\"} opacity={this.state.focusIndex === _idx ? 1 : 0}>\n                        <rect x=\"0\" y={-iconSize} width={iconSize * 5.5} height={iconSize} opacity=\"0\"/>\n                        <g className=\"paper-edit-icon\" opacity={pin.edits.rate > 0 ? 1 : 0} visibility={pin.edits.rate > 0 ? \"none\" : \"hidden\"}>\n                            <IconThumbsUpSolid x={iconSize * 0.5} y={-iconSize} fill=\"#00a000\" width={iconSize} height={iconSize}/>\n                            <rect x={iconSize * 0.5} y={-iconSize} width={iconSize} height={iconSize} onClick={() => this.onEdit(\"thumb-delete\", pin.source)} fill=\"transparent\" />\n                        </g>                        \n                        <g className=\"paper-edit-icon\" opacity={pin.edits.rate < 0 ? 1 : 0} visibility={pin.edits.rate < 0 ? \"none\" : \"hidden\"}>\n                            <IconThumbsDownSolid x={iconSize * 2} y={-iconSize} fill=\"#a00000\" width={iconSize} height={iconSize}/>\n                            <rect x={iconSize * 2} y={-iconSize} width={iconSize} height={iconSize} onClick={() => this.onEdit(\"thumb-delete\", pin.source)} fill=\"transparent\" />\n                        </g>\n                        <g className=\"paper-edit-icon\" opacity={pin.edits.rate >= 0 ? 1 : 0} visibility={pin.edits.rate >= 0 ? \"none\" : \"hidden\"}>\n                            <IconThumbsDown x={iconSize * 2} y={-iconSize} fill=\"#a00000\" width={iconSize} height={iconSize}/>\n                            <rect x={iconSize * 2} y={-iconSize} width={iconSize} height={iconSize} onClick={() => this.onEdit(\"thumb-down\", pin.source)} fill=\"transparent\" />\n                        </g>\n                        <g className=\"paper-edit-icon\" opacity={pin.edits.rate <= 0 ? 1 : 0} visibility={pin.edits.rate <= 0 ? \"none\" : \"hidden\"}>\n                            <IconThumbsUp x={iconSize * 0.5} y={-iconSize} fill=\"#00a000\" width={iconSize} height={iconSize}/>\n                            <rect x={iconSize * 0.5} y={-iconSize} width={iconSize} height={iconSize} onClick={() => this.onEdit(\"thumb-up\", pin.source)} fill=\"transparent\" />\n                        </g>\n                        <g className=\"paper-edit-icon\">\n                            <IconExchange x={iconSize * 3.5} y={-iconSize} fill=\"#0000a0\" width={iconSize} height={iconSize}/>\n                            <rect x={iconSize * 3.5} y={-iconSize} width={iconSize} height={iconSize} onClick={() => this.onEdit(\"to-exchange\", pin.source)} fill=\"transparent\" />\n                        </g>\n                    </g>\n                    {/* <path className=\"cross-identifier\" d={`M ${-this.props.radius/3},0 L ${this.props.radius/3},0 M 0,${-this.props.radius/3} L 0,${this.props.radius/3}`}\n                          stroke={this.props.color} strokeWidth={this.props.strokeWidth}/> */}\n                </g>\n            )\n        })\n        const bottomY = baseY\n        const collapsed_path = `M ${-this.props.radius},0 A ${this.props.radius} ${this.props.radius} 0 0 1 ${this.props.radius},0 L ${this.props.radius},0 A ${this.props.radius} ${this.props.radius} 0 0 1 ${-this.props.radius},0 L ${-this.props.radius},0`\n        const expanded_path = `M ${-this.props.radius},0 A ${this.props.radius} ${this.props.radius} 0 0 1 ${this.props.radius},0 L ${this.props.radius},${bottomY} A ${this.props.radius} ${this.props.radius} 0 0 1 ${-this.props.radius},${bottomY} L ${-this.props.radius},0`\n        return (\n            <g transform={`translate(${this.props.x}, ${this.props.y})`}>\n                {/* <rect x={textXOffset} y={-this.props.lineHeight-this.props.radius/2} width={maxTextWidth * this.props.fontSize / 2} height={this.props.lineHeight * textLines + this.props.radius} fill=\"white\"/> */}\n                <g onClick={() => this.setState({...this.state, displayInteractionTool: !this.state.displayInteractionTool})}>\n                    <path id={`path-${this.id}`} stroke={this.props.color} strokeWidth={this.props.strokeWidth} fill=\"white\">\n                    </path>\n                    <style>\n                        {`\n                        #path-${this.id} {\n                            d: path('${collapsed_path}');\n                            transition: d .5s ease;\n                        }\n                        #path-${this.id}:hover {\n                            d: path('${expanded_path}');\n                        }\n                        }`}\n                    </style>\n                </g>\n                {texts}\n            </g>\n        )\n    }\n}","import React from 'react'\nimport Node from './node'\nimport randomstring from 'randomstring'\nimport chroma from 'chroma-js'\nimport _ from 'lodash'\nimport './index.css'\n\nexport default class MRT extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.hideSubBranch = this.props.hideSubBranch\n\n        this.EraMinRatio = this.props.EraMinRatio || 0.05\n        this.lastEraRatio = this.props.lastEraRatio || 0.2\n\n        this.strokeWidth = 4\n\n        this.labelTextFontSize = 64\n\n        this.nodeRadius = 20\n        this.nodeTextLeadingMargin = 20\n        this.nodeTextWidth = 260\n        this.nodeTextFontSize = 16\n        this.nodeTextLineHeight = 18\n\n        this.averageFontWidthRatio = 0.6\n        \n        this.nodePaddingLeft = 20\n        this.nodePaddingRight = 20\n        this.nodePaddingTop = 32\n        this.nodePaddingBottom = 12\n\n        this.nodeOffsetX = this.nodePaddingLeft + this.nodeRadius\n        this.nodeOffsetY = this.nodePaddingTop + this.nodeRadius\n        \n        this.nodeWidth = this.nodePaddingLeft + 2 * this.nodeRadius + this.nodeTextLeadingMargin + this.nodeTextWidth + this.nodePaddingRight\n        this.nodeTextLines = (node) => node.pins.reduce((prev, pin) => prev + pin.textPieces.length, 0)\n        this.nodeHeight = (lines) => this.nodePaddingTop + this.nodeRadius + Math.max(this.nodeRadius, (lines-1) * this.nodeTextLineHeight) + this.nodePaddingBottom\n        this.nodeTextFold = (text, span) => {\n            const textLength = Math.floor(((span - 1) * this.nodeWidth + this.nodeTextWidth) / (this.nodeTextFontSize * this.averageFontWidthRatio))\n            return text.match(new RegExp(`([^\\\\n]{1,${textLength}})(\\\\s|$)`, 'g'))\n        }\n\n        this._data = props.data\n\n        const extract = (paper) => {\n            const id = paper[\"paper_id\"]\n            const year = paper[\"paper_year\"]\n            const venue = paper[\"paper_venue\"].trim()\n            const title = paper[\"paper_title\"].trim()\n            const citations = paper[\"paper_citations\"]\n            let prefix = `${year}`\n            const venue_year = /^(19|20)\\d{2}\\b/.exec(venue)\n            if (venue_year == null && venue.length > 0) {\n                prefix = `${year} ${venue}`\n            } else if (venue_year != null) {\n                prefix = `${venue}`\n            }\n            const text = `[${prefix}] ${title}`.replace('\\t', ' ').replace('\\n', ' ')\n            return {id, year, venue, title, citations, text}\n        }\n        this.data = {\n            root: extract(this._data.root),\n            branches: []\n        }\n        this._data.branches.forEach(branch => {\n            this.data.branches.push(branch[0].map(extract))\n            this.data.branches.push(branch[1].map(extract))\n        })\n        this.data.branches.forEach(branch => branch.sort((a, b) => {\n            return a.year === b.year ? (b.citations - a.citations) : (b.year - a.year)\n        }))\n        this.clusterNames = this._data.branches.map((branch, idx) => `Cluster ${idx}`)\n\n        let userEdits = {}\n        userEdits[this.data.root.id] = {rate: 0, cluster: 0}\n        this.data.branches.forEach((branch, idx) => branch.forEach(node => userEdits[node.id] = {rate: 0, cluster: Math.floor(idx / 2)}))\n        this.state = {userEdits, toExchange: null}\n    }\n    \n    render() {\n\n        let views = {colorDefs: [], nodes: {}, edges: []}\n\n        let dataView = {root: _.cloneDeep(this.data.root), branches: this.data.branches.map(() => [])}\n        {\n            this.data.branches.forEach((branch, idx) => branch.forEach(node => {\n                const _node = _.cloneDeep(node)\n                dataView.branches[this.state.userEdits[node.id].cluster * 2 + idx % 2].push(_node)\n            }))\n        }\n\n        if (this.hideSubBranch) dataView.branches = dataView.branches.map((branch, idx) => idx % 2 === 0 ? branch : [])\n        let numBranches = dataView.branches.length\n        let numClusters = Math.floor(numBranches / 2)\n\n        const rootColor = chroma.scale()(0.5)\n        const colors = chroma.cubehelix().start(200).rotations(3).gamma(0.7).lightness([0.2, 0.6]).scale().correctLightness().colors(numClusters)\n\n        let eras = []\n        {\n            let years = dataView.branches.flat().map(paper => paper.year).sort((a, b) => (b - a))\n            let _to = years[0]\n            let _cnt = 1\n            let eraMinSize = this.EraMinRatio * years.length\n            let lastEraMinSize = this.lastEraRatio * years.length\n            for (let i = 1; i < years.length; i++) {\n                if (years[i] === years[i-1] || _cnt < eraMinSize || i > years.length - lastEraMinSize) _cnt += 1\n                else {\n                    eras.push({from: years[i-1], to: _to, cnt: _cnt})\n                    _to = years[i]\n                    _cnt = 1\n                }\n            }\n            eras.push({from: years[years.length-1], to: _to, cnt: _cnt})\n        }\n        \n        views.generateGradientColor = (from, to, x1, y1, x2, y2) => {\n            const colorID = randomstring.generate(8)\n            views.colorDefs.push(<defs key={colorID}>\n                <linearGradient id={colorID} x1={x1} y1={y1} x2={x2} y2={y2} gradientUnits=\"userSpaceOnUse\">\n                  <stop offset=\"20%\"  stopColor={from} />\n                  <stop offset=\"80%\" stopColor={to} />\n                </linearGradient>\n              </defs>)\n            return `url('#${colorID}')`\n        }\n\n        // Arrange coornidates for each era node\n        views.nodes.root = {\n            isRoot: true,\n            x: this.nodeWidth * (dataView.branches.length - 1) / 2 + this.nodeOffsetX,\n            y: this.nodeOffsetY,\n            color: rootColor,\n            pins: [{\n                source: dataView.root,\n                edits: this.state.userEdits[dataView.root.id],\n                textPieces: this.nodeTextFold(dataView.root.text, 2)\n            }],\n            clusterIndex: -1,\n        }\n        views.nodes.branches = dataView.branches.map((branch, branchID) => eras.map((era, eraID) => { return {\n            isRoot: false,\n            x: this.nodeWidth * branchID + this.nodeOffsetX,\n            y: 0,\n            color: chroma(colors[Math.floor(branchID / 2)]).brighten(branchID % 2),\n            pins: branch.filter(paper => paper.year >= era.from && paper.year <= era.to).map(paper => { return {\n                source: paper,\n                edits: this.state.userEdits[paper.id],\n            }}).sort((a, b) => (a.source.year === b.source.year) ? (b.source.citations - a.source.citations) : (b.source.year - a.source.year)),\n            era: eraID,\n            clusterIndex: Math.floor(branchID / 2),\n        }}))\n        \n        views.nodes.branches.forEach((branch, branchID) => branch.forEach((node, eraID) => {\n            if (node.pins.length === 0) return\n            const span = (branchID < numBranches - 1 && views.nodes.branches[branchID+1][eraID].pins.length === 0) ? 2 : 1\n            node.pins.forEach(pin => pin.textPieces = this.nodeTextFold(pin.source.text, span))\n        }))\n\n        let horizon = this.nodeHeight(this.nodeTextLines(views.nodes.root)) + this.nodePaddingTop\n        let _height = horizon + this.nodePaddingBottom\n        {\n            eras.forEach((era, eraID) => {\n                const maxLines = views.nodes.branches.reduce((prev, branch) => Math.max(prev, this.nodeTextLines(branch[eraID])), 0)\n                views.nodes.branches.forEach(branch => branch[eraID].y = _height + this.nodeOffsetY)\n                _height += this.nodeHeight(maxLines)\n            })\n        }\n\n        {\n            let node = views.nodes.root\n            views.edges.push({x1: node.x, y1: node.y, x2: node.x, y2: horizon, color: rootColor})\n            let nodeLeft = views.nodes.branches[0][0]\n            let nodeRight = views.nodes.branches[numBranches - 2][0]\n            views.edges.push({x1: nodeLeft.x, y1: horizon, x2: nodeRight.x, y2: horizon, color: rootColor})\n        }\n        {\n            views.nodes.branches.forEach((branch, branchID) => {\n                const _branch = branch.filter(node => node.pins.length > 0)\n                if (_branch.length === 0) return\n                const startEra = (branchID % 2 === 0) ? 0 : _branch[0].era\n                let endEra = _branch[_branch.length-1].era\n                if (branchID % 2 === 0) {\n                    const _nextBranch = views.nodes.branches[branchID+1].filter(node => node.pins.length > 0)\n                    if (_nextBranch.length > 0) {\n                        endEra = Math.max(endEra, _nextBranch[0].era)\n                    }\n                }\n                for (let eraID = startEra + 1; eraID <= endEra; eraID++) {\n                    let node = branch[eraID]\n                    let sib = branchID > 0 ? views.nodes.branches[branchID-1][eraID] : null\n                    const yStart = (node.pins.length === 0 && ((branchID > 0 && sib.pins.length > 0) || (eraID === endEra))) ? (node.y - this.nodeRadius - this.nodeTextLineHeight) : node.y\n                    node = branch[eraID-1]\n                    sib = branchID > 0 ? views.nodes.branches[branchID-1][eraID-1] : null\n                    const yEnd = (node.pins.length === 0 && branchID > 0 && sib.pins.length > 0) ? (node.y - this.nodeOffsetY + this.nodeHeight(this.nodeTextLines(sib)) - this.nodePaddingBottom + this.nodeTextLineHeight) : node.y\n                    views.edges.push({x1: node.x, y1: yStart, x2: node.x, y2: yEnd, color: node.color})\n                }\n                if (branchID % 2 === 0) {\n                    const node = branch[0]\n                    const sib = branchID > 0 ? views.nodes.branches[branchID-1][0] : null\n                    const yEnd = (node.pins.length === 0 && branchID > 0 && sib.pins.length > 0) ? (node.y - this.nodeRadius - this.nodeTextLineHeight) : node.y\n                    views.edges.push({x1: node.x, y1: horizon, x2: node.x, y2: yEnd, color: views.generateGradientColor(rootColor, node.color, node.x, horizon, node.x, yEnd)})\n                } else {\n                    const node = branch[startEra]\n                    const sib = views.nodes.branches[branchID-1][startEra]\n                    const yEnd = node.y - this.nodeRadius - this.nodeTextLineHeight\n                    const yStart = node.y\n                    views.edges.push({x1: node.x, y1: yStart, x2: node.x, y2: yEnd, color: node.color})\n                    views.edges.push({x1: node.x, y1: yEnd, x2: sib.x, y2: yEnd, color: views.generateGradientColor(node.color, sib.color, node.x, yEnd, sib.x, yEnd)})\n                }\n            })\n        }\n\n        _height += this.labelTextFontSize * 3\n        \n        const onEdit = (action, source, param) => {\n            const _state = {...this.state}\n            if (action === \"thumb-up\" && _state.userEdits[source.id].rate <= 0) {\n                _state.userEdits[source.id].rate = 1\n                this.setState(_state)\n            } else if (action === \"thumb-down\" && _state.userEdits[source.id].rate >= 0) {\n                _state.userEdits[source.id].rate = -1\n                this.setState(_state)\n            } else if (action === \"thumb-delete\" && _state.userEdits[source.id].rate !== 0) {\n                _state.userEdits[source.id].rate = 0\n                this.setState(_state)\n            } else if (action === \"to-exchange\" && _state.toExchange === null) {\n                _state.toExchange = source\n                this.setState(_state)\n            } else if (action === \"exchange\") {\n                _state.userEdits[source.id].cluster = param\n                _state.toExchange = null\n                this.setState(_state)\n            }\n        }\n\n        const _width = this.nodeWidth * dataView.branches.length\n        return <svg className='mrt' /*width={`${_width}px`} height={`${_height}px`}*/ width=\"100%\" viewBox={`0 0 ${_width} ${_height}`}>\n            {views.colorDefs}\n            {\n                <g className=\"mrt-background\">\n                    <rect x=\"0\" y=\"0\" width={_width} height={horizon} fill={chroma(rootColor).luminance(0.9)}></rect>\n                </g>\n            }\n            {\n                views.nodes.branches.map((branch, idx) => {\n                    if (idx % 2 !== 0) return\n                    return <g className=\"mrt-background\" key={idx} opacity={this.state.toExchange === null ? 1 : 0}>\n                        <rect x={this.nodeWidth*idx} y={horizon} width={this.nodeWidth*2} height={_height-horizon} fill={chroma(branch[0].color).luminance(0.9)}></rect>\n                        <text x={this.nodeWidth*idx+this.nodeOffsetX} y={_height - this.labelTextFontSize} fill={chroma(branch[0].color).luminance(0.7)} fontSize={this.labelTextFontSize}>{this.clusterNames[Math.floor(idx / 2)]}</text>\n                    </g>\n                })\n            }\n            {views.edges.map((edge, idx) =>\n                <line key={idx} x1={edge.x1} y1={edge.y1} x2={edge.x2} y2={edge.y2} strokeWidth={this.strokeWidth - 1} stroke={edge.color}/>\n            )}\n            {[views.nodes.root, ...views.nodes.branches.flat(Infinity)].map((node, idx) => node.pins.length > 0 &&\n                <Node key={idx}\n                      pins={node.pins} \n                      x={node.x} y={node.y}\n                      radius={this.nodeRadius}\n                      lineHeight={this.nodeTextLineHeight}\n                      color={node.color}\n                      isRoot={node.isRoot}\n                      clusterIndex={node.clusterIndex}\n                      clusterNames={this.clusterNames}\n                      fontSize={this.nodeTextFontSize}\n                      strokeWidth={this.strokeWidth}\n                      onEdit={onEdit}/>)}\n            {\n                views.nodes.branches.map((branch, idx) => {\n                    if (idx % 2 !== 0) return\n                    const isCurrent = this.state.toExchange !== null && Math.floor(idx / 2) === this.state.userEdits[this.state.toExchange.id].cluster\n                    return <g className=\"mrt-background\" key={idx} opacity={this.state.toExchange === null ? 0 : 1} visibility={this.state.toExchange === null ? \"hidden\" : \"none\"} onClick={() => onEdit(\"exchange\", this.state.toExchange, Math.floor(idx / 2))}>\n                        <rect className=\"mrt-background-card\" x={this.nodeWidth*idx} y={horizon} width={this.nodeWidth*2} height={_height-horizon} fill={chroma(branch[0].color).luminance(0.5)}></rect>\n                        <text className=\"mrt-background-text\" x={this.nodeWidth*idx+this.nodeOffsetX} y={_height - this.labelTextFontSize} fill={chroma(branch[0].color).luminance(0.2)} fontSize={this.labelTextFontSize * (isCurrent ? 1 : 0.5)}>{this.clusterNames[Math.floor(idx / 2)]}</text>\n                    </g>\n                })\n            }\n        </svg>\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MRT from './components/mrt';\nimport sample_data from './sample.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MRT data={sample_data}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}